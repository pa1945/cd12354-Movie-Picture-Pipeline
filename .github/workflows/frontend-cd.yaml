#
#
name: Frontend CD - Continuous Deployment

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'  

  push:
    # A Continuous Deployment workflow file that:
    # Is __triggered__ on `push` events against the `main` branch,
    # Only when code in the frontend application changes
    # Can be run on-demand, i.e. manually without needing to push code.
    branches:
      - main
    types: [opened, reopened]

env:
  #IMAGE_NAME: frontend
  COMPONENT_NAME: frontend
  #
  # https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
  #DEPLOYMENT_NAME: frontend
  DEPLOY: frontend
  #
  #EKS_CLUSTER_NAME: cluster
  #CLUSTER: pafcluster-mov-pic  # 'cluster' Defined in 'main.tf'
  CLUSTER: clusterpaf1945
  #
  #SHA7: ${GITHUB_SHA:0:7}

jobs:
  lint-cd:
    name: Frontend CD linting
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Caching node modules dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Npm Clean install dependencies
        run: npm ci

      - name: Linting
        run: npm run lint

  test-cd:
    name: Frontend CD test job
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: NodeJS Config
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Npm Clean Install dependencies
        run: npm ci

      - name: Run test
        run: npm run test
        #run: CI=true npm run test
        #https://docs.github.com/en/actions/learn-github-actions/variables
        # CI: Always set to true.

  build:
    name: Frontend CD Build
    runs-on: ubuntu-latest
    needs: [lint-cd, test-cd]
    if: success()
    defaults:
      run:
        shell: bash
        working-directory: frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build docker image
        env:
          REACT_APP_MOVIE_API_URL: ${{ vars.REACT_APP_MOVIE_API_URL }}
          # REACT_APP_MOVIE_API_URL=http://localhost:5000
        run: |
          #echo SHA7: "${SHA7}"
          echo GITHUB_SHA: "${GITHUB_SHA}"
          echo "REACT_APP_MOVIE_API_URL: ${REACT_APP_MOVIE_API_URL}"
          echo "--- docker images ---"
          docker images
          echo "--- docker build ---"
          docker build --tag $COMPONENT_NAME:${{ github.sha }} .
          echo "--- docker images ---"
          docker images
          # Already declared inside the Dockerfile
          #--build-arg REACT_APP_MOVIE_API_URL="http://$REACT_APP_MOVIE_API_URL" \
          #.
          # Tagging an image just creates an alias to an image name or an imageId.

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}         
          #aws-region: ${{ secrets.AWS_REGION }}         
          #aws-region: ${{ vars.AWS_REGION }}
          #aws-region: us-east-1
          #Alternaiv: us-east-2, us-west-1 or us-west-2.

      - name: Login to AWS ECR - Elastic Container Registry
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push to publish the docker image to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Search Hub for an image
          #docker search --limit 3 mp-frontend
          #XX docker search --limit 3 $COMPONENT_NAME:${{ github.sha }}
          # Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
          # It necessary this even  when the build was in this workflow.
          # Otherwise we may get:
          # The push refers to repository [***.dkr.ecr.***.amazonaws.com/frontend]
          # An image does not exist locally with the tag: ***.dkr.ecr.***.amazonaws.com/frontend
          #
          echo "--- docker tag image  ---"
          docker tag $COMPONENT_NAME:${{ github.sha }} $REGISTRY/$COMPONENT_NAME:${{ github.sha }}
          #
          echo "--- docker push image  ---"          
          #docker push <username>/<image_name>
          docker push $REGISTRY/$COMPONENT_NAME:${{ github.sha }}
          #
          #docker tag $COMPONENT_NAME:${GITHUB_SHA:0:7} $REGISTRY/$COMPONENT_NAME:${GITHUB_SHA:0:7}
          #docker push $REGISTRY/$COMPONENT_NAME:${GITHUB_SHA:0:7}
          # Have been published ?
          #echo "--- docker search ---"
          #docker search --limit 3 $COMPONENT_NAME:${{ github.sha }}
          echo "--- docker images ---"
          docker images
          echo "--- TESTING_VAR: ---"
          echo ${{ vars.TESTING_VAR }}

      #- name: AI: Push Docker image to ECR
      #  run: |
      #    docker tag your-docker-repo/frontend:${{ github.sha }} your-aws-account-number.dkr.ecr.your-aws-region.amazonaws.com/frontend:${{ github.sha }}
      #    docker push your-aws-account-number.dkr.ecr.your-aws-region.amazonaws.com/frontend:${{ github.sha }}
      
      - name: Authenticate with Kubernetes - Create Kubeconfig Auth file
        run: |
          kubectl config view   # Display the contents of the kubeconfig file
          aws eks update-kubeconfig --name $CLUSTER --region ${{ vars.AWS_DEFAULT_REGION }}
          #aws eks update-kubeconfig --name $CLUSTER --region ${{ vars.AWS_REGION }}
          kubectl config view   #Display the contents of the kubeconfig file

      - name: Deploy the Docker image to AWS Kubernetes cluster - EKS
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          pwd
          ls -asl 
          cd k8s
          # Check that kubectl is properly configured by getting the cluster state:
          kubectl cluster-info
          kubectl config view   #Display the contents of the kubeconfig file
          # https://github.com/kubernetes-sigs/kustomize
          #kustomize edit set image frontend=$REGISTRY/$COMPONENT_NAME:${GITHUB_SHA:0:7}
          kustomize edit set image frontend=$REGISTRY/$COMPONENT_NAME:${{ github.sha }}
          kustomize build . | kubectl apply -f -
          # check if the Deployment was created.
          # https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
          kubectl get deployments
          # To see the Deployment rollout status
          #kubectl rollout status deployment/$DEPLOYMENT_NAME
          #kubectl rollout status deployment/frontend
          kubectl rollout status deployment/$DEPLOY
          echo "--- Confirm communication with the cluster  ---"
          kubectl get svc
          # Checking the resources in the Kubernetes cluster.
          echo "kubectl get nodes"
          kubectl get nodes # Get the list of nodes in the cluster
          echo "--- kubectl get services ---"
          kubectl get services
          echo "--- kubectl get pods ---"
          kubectl get pods
